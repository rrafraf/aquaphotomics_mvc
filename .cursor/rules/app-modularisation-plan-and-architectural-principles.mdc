---
description: Modularization Plan and Architectural Principles
globs: 
alwaysApply: false
---
 # Aquaphotomics Application - Modularization Plan and Architectural Principles

## Current Architecture Issues

1. **UI-Business Logic Coupling**: Main application class handles both UI creation and business logic
2. **Large Monolithic Class**: Main class has too many responsibilities
3. **Direct Component Manipulation**: UI components directly call business logic methods
4. **Data Flow Issues**: Data flow between components isn't clearly defined
5. **Insufficient Domain Modeling**: Business concepts aren't represented as proper domain objects

## Target Architecture: MVC/MVVM Pattern

```
├── app/
│   ├── controllers/         # Application controllers
│   │   ├── __init__.py
│   │   ├── measurement_controller.py
│   │   ├── device_controller.py
│   │   └── data_controller.py
│   ├── models/              # Domain models
│   │   ├── __init__.py
│   │   ├── measurement.py
│   │   ├── channel.py
│   │   └── configuration.py
│   ├── views/               # UI components
│   │   ├── __init__.py
│   │   ├── main_window.py
│   │   ├── channel_table.py
│   │   ├── control_panel.py
│   │   └── dialogs.py
│   └── services/            # Application services
│       ├── __init__.py
│       ├── device_service.py
│       ├── data_service.py
│       └── visualization_service.py
├── lib/                     # Utility libraries & shared code
├── aquaphotomics_app.py     # Main application entry point
└── launcher.ps1             # Launcher script
```

## Key Architectural Principles

### 1. Separation of Concerns (SoC)

- **UI Layer (Views)**: Responsible only for displaying information and capturing user input
- **Business Logic Layer (Controllers/Models)**: Implements application logic and domain rules
- **Service Layer (Services)**: Handles external interactions and complex operations
- **Data Layer (Models)**: Represents domain entities and their relationships

### 2. Domain-Driven Design (DDD)

- Define clear domain models that represent business concepts
- Encapsulate domain logic within the models
- Use a ubiquitous language across the codebase that matches domain terminology

### 3. Single Responsibility Principle (SRP)

- Each class should have only one reason to change
- Break down large classes into smaller, focused components
- Create specialized services for specific functionality

### 4. Event-Driven Architecture

- UI components should communicate with controllers through events
- Controllers communicate changes back to views through events or observable properties
- Decouple components to improve testability and maintainability

### 5. Dependency Injection

- Components receive their dependencies through constructors
- Avoid creating dependencies directly within classes
- Facilitates testing by allowing mock implementations

## Components Breakdown

### Models (Domain Objects)

- **Channel**: Represents a measurement channel with its properties and settings
- **Measurement**: Represents a single measurement or series of measurements
- **Configuration**: Represents device configuration settings
- **User**: Represents user information and preferences

### Controllers (Business Logic)

- **DeviceController**: Manages device communication and operations
- **MeasurementController**: Handles measurement operations and workflows
- **DataController**: Manages data processing and storage
- **ApplicationController**: Coordinates overall application flow

### Views (UI Components)

- **MainWindow**: Overall application window and layout
- **ChannelTableView**: Displays and allows editing of channel data
- **ControlPanelView**: Contains control buttons and status indicators
- **DialogViews**: Various dialogs for user interaction

### Services (Complex Operations)

- **DeviceService**: Communication with hardware
- **DataService**: Data processing and analysis
- **VisualizationService**: Plotting and chart generation
- **FileService**: File I/O operations

## Data Flow Architecture

1. **User Action Flow**:
   ```
   User → View → Controller → Model/Service → Controller → View → User
   ```

2. **View Update Flow**:
   ```
   Model (changes) → Controller (notifies) → View (updates)
   ```

3. **Service Operation Flow**:
   ```
   Controller → Service → External System/Processing → Service → Controller
   ```

## Implementation Guidelines

### 1. Use Observable Patterns for UI Updates

```python
class ObservableProperty:
    def __init__(self, initial_value=None):
        self._value = initial_value
        self._observers = []
        
    def add_observer(self, observer):
        self._observers.append(observer)
        
    def notify_observers(self):
        for observer in self._observers:
            observer(self._value)
            
    @property
    def value(self):
        return self._value
        
    @value.setter
    def value(self, new_value):
        self._value = new_value
        self.notify_observers()
```

### 2. Implement Controllers with Clear Interfaces

```python
class DeviceController:
    def __init__(self, device_service):
        self.device_service = device_service
        self.connected = ObservableProperty(False)
        
    def connect(self, port):
        """Connect to the device and return connection status"""
        success = self.device_service.connect(port)
        self.connected.value = success
        return success
```

### 3. Create View Classes for UI Components

```python
class ChannelTableView:
    def __init__(self, parent, controller):
        self.frame = tk.Frame(parent)
        self.controller = controller
        self._create_ui()
        
        # Observe controller properties
        controller.channels.add_observer(self.update_channels)
        
    def update_channels(self, channels):
        """Update UI when channels change"""
        # Update UI elements based on channel data
```

### 4. Separate Visualization Logic

```python
class VisualizationService:
    def __init__(self):
        self.figures = {}
        self._initialize_plots()
        
    def plot_data(self, data, plot_type):
        """Plot data using the appropriate visualization method"""
        if plot_type == "linear":
            return self._plot_linear(data)
        elif plot_type == "polar":
            return self._plot_polar(data)
        # etc.
```

### 5. Use Proper Exception Handling

```python
class DeviceService:
    def read_data(self, channel):
        try:
            # Attempt to read from device
            return success, data
        except HardwareError as e:
            # Log and handle hardware-specific errors
            return failure, str(e)
        except Exception as e:
            # Handle unexpected errors
            return critical_failure, str(e)
```

## Implementation Roadmap

1. **Create Domain Models**
   - Define basic domain entities
   - Implement properties and methods

2. **Implement Service Layer**
   - Refactor existing libraries into service classes
   - Add proper error handling

3. **Create Controller Classes**
   - Move business logic from main app to controllers
   - Implement event-based communication

4. **Refactor UI Components**
   - Create view classes from existing UI code
   - Connect views to controllers

5. **Update Main Application**
   - Make main app coordinate between components
   - Implement proper initialization sequence